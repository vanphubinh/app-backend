//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use async_trait::async_trait;
use infra::uuid::Uuid;
use sea_orm::{entity::prelude::*, ActiveModelBehavior, ActiveModelTrait, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "attribute_option_value")]
#[serde(rename_all(serialize = "camelCase", deserialize = "snake_case"))]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  #[sea_orm(column_type = "Text")]
  pub value: String,
  #[sea_orm(column_type = "Uuid")]
  pub attribute_option_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::attribute_option::Entity",
    from = "Column::AttributeOptionId",
    to = "super::attribute_option::Column::Id"
  )]
  AttributeOption,
}

impl Related<super::attribute_option::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::AttributeOption.def()
  }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
  fn new() -> Self {
    Self {
      id: Set(Uuid::new()),
      ..ActiveModelTrait::default()
    }
  }
}
